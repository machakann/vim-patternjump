*patternjump.txt*	Last change:27-Feb-2015.

Move cursor as you like.

Author  : machakann <mckn@outlook.jp>
License : NYSL license
          Japanese <http://www.kmonos.net/nysl/>
          English (Unofficial) <http://www.kmonos.net/nysl/index.en.html>

Requirement:	Vim 7.3.816 or higher
		|+reltime| feature (optional)
		|+float| feature (optional)

==============================================================================
CONTENTS					*patternjump-contents*

INTRODUCTION		|patternjump-introduction|
CONFIGURATION		|patternjump-configuration|
KEYMAPPINGS		|patternjump-keymappings|
COMMANDS		|patternjump-commands|
FUNCTIONS		|patternjump-functions|

==============================================================================
INTRODUCTION					*patternjump-introduction*

Patternjump gives you a effective way to move cursor in various modes. The
rules to move cursor can be easily optimized by using regular expression. In
this help those rules defined by regular expression are called patterns.
Numbers of patterns can be registered and cursor would be moved to the closest
candidate in them. This plugin serves two keymappings.  One searches
candidates for forward direction, and the other searches them for backward
direction.

At first you need to prepare patterns and then you can use these keymappings.
But, OK, don't afraid about the preparation, if there is no pattern which you
defined, keymappings uses default patterns. I suggest that use it first and
learn how it works, after that you can optimize patterns as you like.
Following descriptions explain how these keymappings work briefly.

Suppose that your cursor is on the first character of a line like this:
>
	let foo = "bar"
<
If you define a pattern "bar", of course, it matches with "bar". Thus using
the keymapping which searches candidates in forward direction, cursor will
move on a word "bar". Here I should say there are two types of patterns,
head-patterns and tail-patterns. All the patterns should belong to either head
or tail patterns, you can choose which when you register a new pattern. If
"bar" belongs to head-patterns, cursor will move on 'b' of "bar". And if "bar"
belongs to tail-patterns, cursor will move on 'r' of "bar".
>
	---------->#    head-pattern
	let foo = "bar"                         '#' represents cursor position
	------------>#  tail-pattern
<
I guess you have found that the pattern "bar" seems like not useful. So "bar"
is not included in default, I am not included in foo. Alternatively, a pattern
'\<\h\k\+\>' is included in default patterns. This pattern matches with a
independent word determined by the option 'iskeyword' in a source code.
Therefore cursor will stop at "let", "foo", "bar". I think they are the very
what we want to correct when we review a source code in many cases.
>
	#   #      #    head-pattern
	let foo = "bar"                         '#' represents cursor position
	  #   #      #  tail-pattern
<
Additionally, these patterns can be switched according to |vim-modes|. With
default patterns, '\<\h\k\+\>' is belongs to head-patterns in normal mode,
meanwhile it belongs to tail-patterns in insert mode. Because |text-objects|
and {motion} gives us a excellent environment for editing in normal mode, if
you want to cut a word and substitute to a correct word, press |c||iw| or just
|c||w| in this case. On the other hand, we can not use |text-objects| in
insert mode, however we can do some easy work also in insert mode. If you want
to delete a word in front of cursor, you can use |i_CTRL-w|. That is why the
reason I defined the default patterns like this. If you are interested in the
customization of patterns, please see |patternjump-configuration|.

==============================================================================
CONFIGURATION					*patternjump-configuration*

You can use the variable named |g:patternjump_patterns| to tell your
preferable rules to this plugin. At first I introduce the equivalent setting
with the default.
>
	let g:patternjump_patterns = {
		\ '_' : {
		\   'i' : {
		\     'head' : ['^\s*\zs\S', ',', ')', ']', '}'],
		\     'tail' : ['\<\h\k*\>', '.$'],
		\     },
		\   'n' : {
		\     'head' : ['^\s*\zs\S', '\<\h\k*\>', '.$'],
		\     },
		\   'x' : {
		\     'tail' : ['^\s*\zs\S', '\<\h\k*\>', '.$'],
		\     },
		\   'o' : {
		\     'forward'  : {'tail_inclusive' : ['\<\h\k*\>']},
		\     'backward' : {'head_inclusive' : ['\<\h\k*\>']},
		\     },
		\   },
		\ '*' : {
		\   'c' : {
		\     'head' : ['^', ' ', '/', '[A-Z]', ',',
		\               ')', ']', '}', '$'],
		\     },
		\   },
		\ }
<

						*g:patternjump_patterns*
As you can see, |g:patternjump_patterns| is a dictionary and it has keys which
is corresponded to each |filetype| at the first level. This key name should
equal to the value &filetype of each filetypes, that is to say, it should same
as the filetype name which is set by |ftdetect|. Although the default patterns
do not have filetype name keys at this level, but '_' and '*' keys are there.
They are alternatives of filetype name and employed in versatile situations.
The key '_' is used for the case there is no specified patterns for the
current filetype. The key '*' will be explained later. If you want to add
filetype specific patterns, then you can do it easily. For example, assume
that you want to add a pattern for the variable name with scope of Vim script,
just define your patterns like this:
>
	let g:patternjump_patterns = {
		\ '_' : {
		\   'i' : {
		\     'head' : ['^\s*\zs\S', ',', ')', ']', '}'],
		\     'tail' : ['\<\h\k*\>', '.$'],
		\     },
		\   'n' : {
		\     'head' : ['^\s*\zs\S', '\<\h\k*\>', '.$'],
		\     },
		\   'x' : {
		\     'tail' : ['^\s*\zs\S', '\<\h\k*\>', '.$'],
		\     },
		\   'o' : {
		\     'forward'  : {'tail_inclusive' : ['\<\h\k*\>']},
		\     'backward' : {'head_inclusive' : ['\<\h\k*\>']},
		\     },
		\   },
		\
		\ '*' : {
		\   'c' : {
		\     'head' : ['^', ' ', '/', '[A-Z]', ',',
		\               ')', ']', '}', '$'],
		\     },
		\   },
		\
		\ 'vim' : {
		\   'include' : '_'
		\   'n' : {
		\     'head' : ['\<[abglstvw]:\k\+'],
		\     },
		\   },
		\ }
<
Or if you have already defined your patterns to |g:patternjump_patterns|, then
the following description is also OK.
>
	let g:patternjump_patterns.vim = {
		\   'n' : {
		\     'include' : '_'
		\     'head' : ['\<[abglstvw]:\k\+'],
		\     },
		\   },
		\ }
<
But, actually, this pattern can be covered by the default pattern '\<\h\k*\>'.
This pattern would not be required. Just for explanation.

Each filetype settings have a dictionary as a value. This dictionary has keys
like "i", "n", "x", "o", "c". These keys represent the mode specified
patterns.

	'n' : normal mode
	'x' : visual mode
	'o' : operator-pending mode
	'c' : command-line mode
	'i' : insert mode

If you want to use same patterns in different mode, the key name can
be put together like "ci", "nxo". In this case, both "ci" and "ic" are OK.

As you can see in the default patterns, only the operator-pending mode can
have unique assignments like "head-inclusive" and "tail_inclusive". "head" and
"tail" patterns in operator-pending mode works as |exclusive| motion. So if
you want to make it |inclusive| motion, please use "head-inclusive" and
"tail_inclusive". If |exclusive| and |inclusive| pattern mathes same position
at the same time, the cursor will move inclusively.

If you see the filetype specific patterns for vim, you would find a special
key named "include" and it has a value '_'. This means that the patterns in
'_' are included when you edit vimscript. The value should be a string or a
list. If you want to add much more other settings, use list for the value.
>
	let g:patternjump_patterns = {
		\ '_' : {
		\   'i' : {
		\     'head' : ['^\s*\zs\S', ',', ')', ']', '}'],
		\     'tail' : ['\<\h\k*\>', '.$'],
		\     },
		\   'n' : {
		\     'head' : ['^\s*\zs\S', '\<\h\k*\>', '.$'],
		\     },
		\   'x' : {
		\     'tail' : ['^\s*\zs\S', '\<\h\k*\>', '.$'],
		\     },
		\   'o' : {
		\     'forward'  : {'tail_inclusive' : ['\<\h\k*\>']},
		\     'backward' : {'head_inclusive' : ['\<\h\k*\>']},
		\     },
		\   },
		\ '*' : {
		\   'c' : {
		\     'head' : ['^', ' ', '/', '[A-Z]', ',',
		\               ')', ']', '}', '$'],
		\     },
		\   },
		\ 'SomeOtherFiletype' : {
		\   'nxo' : {
		\     'head' : ['foo'],
		\     'tail' : ['bar'],
		\     },
		\   },
		\ 'vim' : {
		\   'include' : ['_', 'SomeOtherFiletype'],
		\   'n'     : {
		\     'head' : ['\<[abglstvw]:\k\+'],
		\     },
		\   },
		\ }
<
There is one more special key name '*' other than '_'. If this key exists, it
is always included. Command-line mode configuration is probably common for all
filetypes. Thus using '*' key might be a good way to share command-line mode
patterns. However, because of this characteristic, this key might cause
unwanted effect for other scenes. Please use it carefully.

This "include" is only available in a unit of a whole filetype settings, you
can not include mode specific or head-/tail-patterns separately. So if you
want to use common patterns more finely, I suggest to write as following.
>
	let common_pattern = ['\<\h\k*\>']
	let g:patternjump_patterns = {
		\ '_' : {
		\   'i' : {
		\     'head' : ['^\s*\zs\S', ',', ')', ']', '}'],
		\     'tail' : ['.$'] + common_pattern
		\     },
		\   'n' : {
		\     'head' : ['^\s*\zs\S', '.$'] + common_pattern,
		\     },
		\   'x' : {
		\     'tail' : ['^\s*\zs\S', '.$'] + common_pattern,
		\     },
		\   'o' : {
		\     'forward'  : {'tail_inclusive' : common_pattern},
		\     'backward' : {'head_inclusive' : common_pattern},
		\     },
		\   },
		\ '*' : {
		\   'c' : {
		\     'head' : ['^', ' ', '/', '[A-Z]', ',',
		\               ')', ']', '}', '$'],
		\     },
		\   },
		\ }
<
If you add patterns to "common_pattern", they will valid as tail-patterns in
 insert mode and also as head-patterns in normal mode, as tail-patterns in
 visual mode.
NOTE: "include" can not be nested!

You can use different patterns for the forward directed keymapping and the
backward one as you can see in operator-pending mode configuration of the
default patterns. And additionally, look at the command-line mode patterns of
following patterns.
>
	let g:patternjump_patterns = {
		\ '_' : {
		\   'i' : {
		\     'head' : ['^\s*\zs\S', ',', ')', ']', '}'],
		\     'tail' : ['\<\h\k*\>', '.$'],
		\     },
		\   'n' : {
		\     'head' : ['^\s*\zs\S', '\<\h\k*\>', '.$'],
		\     },
		\   'x' : {
		\     'tail' : ['^\s*\zs\S', '\<\h\k*\>', '.$'],
		\     },
		\   'o' : {
		\     'forward'  : {'tail_inclusive' : ['\<\h\k*\>']},
		\     'backward' : {'head_inclusive' : ['\<\h\k*\>']},
		\     },
		\   },
		\ '*' : {
		\   'c' : {
		\     'common' : {
		\       'head' : ['$'],
		\       },
		\     'forward' : {
		\       'head' : ['^', ' ', '/', '[A-Z]', ',', ')', ']', '}'],
		\       },
		\     },
		\   },
		\ }
<
If you use this patterns, the forward directed keymapping always move cursor
to at the end of line in command-line mode. There are three kinds of keys in
the value of the key '_', I mean, "common", "forward", and, "backward".
"common" patterns are used for both directions. "forward" and "backward"
patterns are used only for each directed keymappings.

Actually it is possible to omit so many things from |g:patternjump_patterns|.
For example, head-/tail- assignment can be omitted. In that case they are
regarded as head-patterns.
>
	let g:patternjump_patterns = {
		\ '_' : {
		\   'ci'  : [',', ')', ']', '}', '$'],
		\   'nxo' : ['\<\h\k*\>'],
		\   },
		\ }
<
And you can omit mode specification.
>
	let g:patternjump_patterns = {
		\ '_' : ['\<\h\k*\>'],
		\ }
<
It still works.

There are so many types to assign your patterns, but there is a important
rule, the order of assignment. The first level of |g:patternjump_patterns|
should be filetype assignments, mode assignments would come next, and
direction assignments might come, at last head-/tail- assignments come. Each
step can be omitted except for the filetype assignments, but can not change
the order of them.


------------------------------------------------------------------------------
Available keynames~

Filetype assignments~
	'_', '*', and filetype names
	If there is no specific filetype patterns, '_' key will be used.
	The patterns of '*' key will be always included if it exists.

Mode assignments~
	'n', 'x', 'o', 'i', 'c' and their combination

	'n' : normal mode
	'x' : visual mode
	'o' : operator-pending mode
	'c' : command-line mode
	'i' : insert mode

Direction assignments~
	"common", "forward" and "backward"

head-/tail- pattern assignments~
	"head", "tail" and "head_inclusive", "tail_inclusive" is available
	only in operator-pending mode.
	"head" and "tail" patterns is |exclusive|.
	"head_inclusive" and "tail_inclusive" is |inclusive|.


------------------------------------------------------------------------------
Other options~

There are several variables to control the behavior of keymappings. You can
use same variable name with different scopes, buffer local b:, window local
w:, tab page local t:, global g:. If same variable name is defined in
different scopes, b: is prior to w:, w: is prior to t:, t: is prior to g:.

g:patternjump_ignorecase			*g:patternjump_ignorecase*
	If the value is 1, ignore case in search candidates of destination. If
	the value is 0, do not ignore case. Default value is 0.

g:patternjump_caching				*g:patternjump_caching*
	If the value is 1, patternjump makes caches for the current buffer.
	This makes patternjump faster, but the change of
	|g:patternjump_patterns| do not apply until cache is refreshed. If you
	felt your patterns has matured enough, then use this option.
	If you want to change the situation on caching, you can use
	commands, |:PatternjumpCachingOn|, |:PatternjumpCachingOff|,
	|:PatternjumpCachingToggle|. If you want to just clear the current
	cache, then use |:PatternjumpDeleteCache|.

g:patternjump_timeout				*g:patternjump_timeout*
	The time to stop searching for candidates in milli seconds. To prevent
	hanging up your pc, set preferable positive value. If zero or negative
	value is asigned, this plugin does not time out and continue to search
	even if it would take much time. Default value is 1000.
	NOTE: This option needs |+reltime| and |+float|.

g:patternjump_highlight				*g:patternjump_highlight*
	If the value is 1, all the matched candidates are highlighted by
	using |hl-IncSearch|. If the value is 0, the highlighting is tunred
	off. Default value is 0.
	NOTE: The highlighting will be removed when cursor is moved next time.
	NOTE: This feature is valid only in normal, insert, visual mode.
	NOTE: This option might make this plugin slightly slower for
	      highlighting.

g:patternjump_debug_mode			*g:patternjump_debug_mode*
	If the value is 1, do not move cursor, all the matched candidates are
	highlighted by using |hl-IncSearch|, and, echo matched lines and
	columns, matched patterns, and, head or tail. You can check them with
	|:message| command. This option would be useful when you found your
	patterns stopping cursor at unwanted position. You can use this option
	to search which pattern cause the problem. Or you can use the commands
	|PatternjumpDebugModeOn|, |PatternjumpDebugModeOff|,
	|PatternjumpDebugModeToggle|.
	Default value is 0.
	NOTE: The highlighting will be removed when cursor is moved next time.
	NOTE: This option might make this plugin slightly slower for
	      highlighting.


==============================================================================
KEYMAPPINGS					*patternjump-keymappings*

This plugin serves following keymappings.

direction		keymappings			default keymappings
--------------------------------------------------------------------------
forward			<Plug>(patternjump-forward)	<M-l>
backward		<Plug>(patternjump-backward)	<M-h>
--------------------------------------------------------------------------

If you do not need default keymappings, define a variable named
|g:patternjump_no_default_key_mappings| in your vimrc.
>
	let g:patternjump_no_default_key_mappings = 1
<
Then default mappings are never applied. And map them again as you like.

These keymappings can accept {count} assignment. If {count} is assigned,
cursor will go to the {count}th candidate.

These keymappings are available with |nmap|, |xmap|, |omap|, |imap|, |cmap|.


------------------------------------------------------------------------------
keymappings~
<Plug>(patternjump-forward)				*patternjump-forward*
	This keymapping moves cursor to the closest candidate which is matched
	with patterns in forward direction. You may use as follows (It is
	the default setting, do not need to write in your vimrc if the default
	mapping is acceptable for you. Just for an example.)
>
	nmap <M-l> <Plug>(patternjump-forward)
<

<Plug>(patternjump-backward)				*patternjump-backward*
	This keymapping moves cursor to the closest candidate which is matched
	with patterns in backward direction. You may use as follows. (It is
	the default setting, do not need to write in your vimrc if the default
	mapping is acceptable for you. Just for an example.)
>
	nmap <M-h> <Plug>(patternjump-backward)
<

==============================================================================
COMMANDS					*patternjump-commands*

:PatternjumpCachingOn				*:PatternjumpCachingOn*
	If you use this command, patternjump start to use caching feature.
	Please see also |g:patternjump_caching|.
	NOTE: The cache is not made immediately, it will be generated when you
	      type a keymapping next time.

:PatternjumpCachingOff				*:PatternjumpCachingOff*
	This command disables caching feature.

:PatternjumpCachingToggle			*:PatternjumpCachingToggle*
	This command toggles the situation of caching feature.

:PatternjumpDeleteCache				*:PatternjumpDeleteCache*
	This command deletes the cache for the current buffer. If caching is
	still turned on, then a new cache would be generated next time.

:PatternjumpDebugModeOn				*:PatternjumpDebugModeOn*
	This command starts the debug mode. Please see
	|g:patternjump_debug_mode|.

:PatternjumpDebugModeOff			*:PatternjumpDebugModeOff*
	This command stops the debug mode. Please see
	|g:patternjump_debug_mode|.

:PatternjumpDebugModeToggle			*:PatternjumpDebugModeToggle*
	This command toggles the situation of the debug mode. Please see
	|g:patternjump_debug_mode|.

==============================================================================
FUNCTIONS					*patternjump-functions*

Patternjump keymappings have correspondent functions. They have similar
interface as following:

patternjump#xxx(mode[, patternjump_patterns[, count[, options_dictionary]]])

The part filled by "xxx" is forward or backward.

The first argument "mode" is always required, it is a character to represent a
kind of mapping modes. Since each commands can be mapped for |nmap|, |xmap|,
|omap|, |imap|, and, |cmap| thus you can assgin 'n', 'x', 'o', 'i', and, 'c'
to notice it which mode you want to map.

The second argument "patternjump_patterns" is a dictionary which has same
structure as |g:patternjump_patterns|. If this argument is assigned,
keymappings ignore |g:patternjump_patterns| and use the assigned one. Or you
can assign just a list like this:
>
	[
		[['head-patterns'], ['tail-patterns']],
		[['head-inc-patterns'], ['tail-inc-patterns']]
	]
<
If the pattern which you want is simple, this description might be enough.
This assignment works as fast as cache. 'head-patterns' and 'tail-patterns'
are for |exclusive| motion, 'head-inc-pattern' and 'tail-inc-pattern' are for
|inclusive| motion in operator-pending mode. In other modes, just
'head-patterns' and 'tail-patterns' are used.

The third argument "count" is a number. If a positive number is assigned,
functions would always ignore {count} and use the assigned number. If zero or
a negative number are assigned, functions refer {count} as usual.

The fourth argument "options_dict" is a dictionary which can force to use
given values of configuration variables. The key names are the name of
configuration variables removing first "g:patternjump_". Thus you can use
"ignorecase", "caching", "timeout", "highlight", "debug_mode".
>
	nnoremap <silent> <M-l> :<C-u>call patternjump#forward(
		\				'n',
		\				g:patternjump_patterns,
		\				0,
		\				{'highlight' : 1})<CR>
<
This mapping always highlight candidates.
If you want to use with |imap|, use like this:
>
	inoremap <silent> <M-l> <C-r>=patternjump#forward(
		\				'i',
		\				g:patternjump_patterns,
		\				0,
		\				{'highlight' : 1})<CR>
<
If you want to use with |cmap|, you should not use <silent>. Otherwise
command-line would be not updated appropriately and you will see that it seems
like not moving cursor.
>
	cnoremap <M-l> <C-r>=patternjump#forward(
		\				'c',
		\				g:patternjump_patterns,
		\				0)<CR>
<
Please see |patternjump-configuration| also.

Besides, a special key "raw" can be also used. If the value is 1, these
functions do not move cursor. But if the value is 2, these functions do. In
addition to that if the value is 1 or 2 return a dictionary which has two
information. The first one is the key "destination", the value is a list which
has a list of line and column number of the destination, the matched pattern,
head or tail. The other is the key "candidates", the value is the list of
lists which has same information as "destination" of candidates.

>
	let output = patternjump#forward(
		\			'n',
		\			g:patternjump_patterns,
		\			1,
		\			{'raw' : 1})

	" the line and column number of the destination
	" e.g. [[1, 5], '\<\h\k*\>', 'head']
	echo output.destination

	" information of candidates
	" e.g. [[[1, 5], '\<\h\k*\>', 'head'], [[1, 10], '$', 'tail']]
	echo output.candidates
<


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:
