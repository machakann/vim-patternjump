*patternjump.jax*	Last change:20-Feb-2014.

カーソル移動をお望みのままに！

書いた人   : machakann <mckn@outlook.com>
ライセンス : NYSL license
          Japanese <http://www.kmonos.net/nysl/>
          English (Unofficial) <http://www.kmonos.net/nysl/index.en.html>

==============================================================================
CONTENTS					*patternjump-contents*

INTRODUCTION		|patternjump-introduction|
CONFIGURATION		|patternjump-configuration|
KEYMAPPINGS		|patternjump-keymappings|
COMMANDS		|patternjump-commands|
FUNCTIONS		|patternjump-functions|

==============================================================================
INTRODUCTION					*patternjump-introduction*

patternjump は様々なモードにおいて効果的にカーソルを移動する手段を提供します。
カーソルを動かすためのルールは正規表現によって定義され、簡単に拡張することがで
きます。このヘルプではカーソルを動かすためのルールをパターンと呼びますのでご留
意ください。パターンは複数登録することができ、すべての候補のうちからマッチした
最も近い場所へカーソルを運ぶように作られています。このプラグインは二種のキーマ
ッピングを提供しそれぞれがパターンの、前方検索、後方検索の機能を担当します。

patternjump をご使用になるうえでは、まずパターンを用意しなければなりません。で
すが、ご安心ください。もしいかなるパターンの指定もない場合は、デフォルトで指定
された基本的なパターンを自動的に使用します。なので、まずは使ってみてどのように
動くのかを知っていただくのがよいでしょう。あなた好みの設定を追加するのはそのあ
とからでも遅くありません。新しい設定を追加するうえで役に立つと思われる機能も用
意しておりますので、 |patternjump-configuration| 及び|patternjump-commands| の
項をご参照ください。それでは patternjump の簡単な説明に移ります。

たとえば次のようなコードの最初の文字の上にカーソルがあるとしましょう。
>
	let foo = "bar"
<
もし "bar" というパターンが定義されている場合、当然これはコード内の "bar" にマ
ッチします。なので、前方検索のキーマッピングを使用した場合、カーソルは "bar"
の上へ移動します。パターンには二種類ありまして、それぞれ head-pattern 、
tail-pattern と呼びます。すべてのパターンはこのどちらかに属さなければなりませ
んので、設定追加の際にどちらか選んでいただくことになります。 もし、 "bar" が
head-pattern に属していた場合、カーソルはマッチ範囲の頭 (head) の 'b' へ動くで
しょう。また、"bar" が tail-pattern に属していた場合、カーソルはマッチ範囲の末
尾 (tail) 、すなわち 'r' の上へ動くでしょう。
>
	---------->#    head-pattern
	let foo = "bar"                               '#' はカーソル位置を表す
	------------>#  tail-pattern
<
さて、お気づきになりましたか？どうにも "bar" というパターンはあまり役に立ちそ
うにありませんね。なのでこれはデフォルトのパターンに収録しないことにしました。
賢い選択ですね。かわりに '\<\h\k*\>' というパターンがデフォルトパターンに含ま
れています。これは 'iskeyword' オプションによって判定される、独立した単語にマ
ッチします。なので上のコードの場合は "let"、 "foo" 、 "bar" の上で止まるでしょ
う。そしてまさにそれは、多くの場合、レビューの際に修正したい箇所ではないでしょ
うか。
>
	#   #      #    head-pattern
	let foo = "bar"                               '#' はカーソル位置を表す
	  #   #      #  tail-pattern
<
さらに、これらのパターンは |vim-modes| に従って切り替えることができます。たと
えば、先ほど紹介した '\<\h\k*\>' というパターンはノーマルモードでは
head-pattern に属している一方で、挿入モードでは tail-pattern に属しています。
ノーマルモードでは |text-objects| や {motion} によって素晴らしい編集環境が得ら
れます。この場合、単語を修正したければ |c||iw| あるいは、単に、 |c||w| で事足
りますね。挿入モードではこれらは使用できないのですが、それでも簡単な編集機能は
備わっています。この場合、単語を削除するのに |i_CTRL-w| が便利です。これらの違
いが、一見、統一性のないように見えるデフォルトパターンの訳なのです。興味を持っ
ていただけましたか？よろしければ |patternjump-configuration| もご覧ください。

==============================================================================
CONFIGURATION					*patternjump-configuration*

あなた好みのパターンは |g:patternjump_patterns| という変数を介してキーマッピン
グに伝えられます。では最初にデフォルトパターンと等価になる設定を紹介します。
>
	let g:patternjump_patterns = {
		\ '_' : {
		\   'ci' : {
		\     'head' : [',', ')', ']', '}'],
		\     'tail' : ['\<\h\k*\>', '$'],
		\     },
		\   'nxo' : {
		\     'head' : ['\<\h\k*\>'],
		\     'tail' : ['$'],
		\     },
		\   },
		\ 'vim' : {
		\   'include' : '_',
		\   'nxo'     : {
		\     'head' : ['\<[abglstvw]:\k\+'],
		\     },
		\   },
		\ }
<

						*g:patternjump_patterns*
ご覧のとおり、 |g:patternjump_patterns| は辞書であり、最初の階層にファイルタイ
プ名に相当するキーを持っています。デフォルト設定は vimscript に特別な設定を持
っているようですね。このキー名はそれぞれのファイルタイプの &filetype の値に等
しい、すなわち |ftdetect| によって設定されるファイルタイプ名でなければいけませ
ん。特別なキー名 '_' は汎用的な設定で、特にファイルタイプに特別なパターン指定
のない場合に使われます。それぞれのファイルタイプ指定のキーもまた値として辞書を
持っています。この辞書は "ci" や "nxo" といったキーを持っていますね。これらは
内包するパターンがどのモードにおいて有効かを指定しています。 "ci" はコマンドラ
インモードおよび挿入モードにおけるパターンであることを、 "nxo" はノーマルモー
ド、ビジュアルモード、オペレータ待機モードにおけるパターンであることを示してい
ます。

	'n' : ノーマルモード
	'x' : ビジュアルモード
	'o' : オペレータ待機モード
	'c' : コマンドラインモード
	'i' : 挿入モード

これらの五つの文字をモード指定に使うことができます。モードの指定はキー名に文字
が含まれていればよく、順番を気にする必要はありません。つまり、 "ci" と "ic" は
どちらも有効です。もし、コマンドラインモードと挿入モードでの設定を分けたければ
、それぞれを独立したキーとし、パターンを内包した辞書を値として与えればよいでし
ょう。
>
	let g:patternjump_patterns = {
		\ '_' : {
		\   'c' : {
		\     'head' : [',', ')', ']', '}'],
		\     'tail' : ['\<\h\k*\>', '$'],
		\     },
		\   'i' : {
		\     'tail' : ['\<\h\k*\>', '$'],
		\     }
		\   'nxo' : {
		\     'head' : ['\<\h\k*\>'],
		\     'tail' : ['$'],
		\     },
		\   },
		\ 'vim' : {
		\   'include' : '_',
		\   'nxo'     : {
		\     'head' : ['\<[abglstvw]:\k\+'],
		\     },
		\   },
		\ }
<
このパターン指定は挿入モードにおいて ',' や閉じ括弧に反応しないようになってい
ます。

vimscript のパターン指定を見てみるとモード指定のキーのほかに特別なキー
"include" があるのが見られますね。これは vimscript 編集時に汎用のパターン '_'
キーに登録されているパターンを含むことを意味します。 "include" キーの値にはフ
ァイルタイプ名および '_' の文字列か、それらを複数含むリストを指定することがで
きます。
>
	let g:patternjump_patterns = {
		\ '_' : {
		\   'ci' : {
		\     'head' : [',', ')', ']', '}'],
		\     'tail' : ['\<\h\k*\>', '$'],
		\     },
		\   'nxo' : {
		\     'head' : ['\<\h\k*\>'],
		\     'tail' : ['$'],
		\     },
		\   },
		\ 'vim' : {
		\   'include' : ['_', 'SomeOtherFiletype'],
		\   'nxo'     : {
		\     'head' : ['\<[abglstvw]:\k\+'],
		\     },
		\   },
		\ }
<
この "include" はファイルタイプ設定単位でしか指定することができません。これよ
りも細かい単位でのパターンの共有の仕組みは用意されていません。なので、少し工夫
して次のように書くとよいでしょう。
>
	let common_pattern = ['\<\h\k*\>']
	let g:patternjump_patterns = {
		\ '_' : {
		\   'ci' : {
		\     'head' : [',', ')', ']', '}'],
		\     'tail' : ['$'] + common_pattern,
		\     },
		\   'nxo' : {
		\     'head' : common_pattern,
		\     'tail' : ['$'],
		\     },
		\   },
		\ 'vim' : {
		\   'include' : ['_', 'SomeOtherFiletype'],
		\   'nxo'     : {
		\     'head' : ['\<[abglstvw]:\k\+'],
		\     },
		\   },
		\ }
<
こう書けば "common_pattern" にパターンを追加したときコマンドラインモード、挿入
モードの tail-pattern および ノーマルモード、ビジュアルモード、オペレータ待機
モードのhead-patternでパターンが共有されます。
NOTE: "include" はネストしません！

実は |g:patternjump_patterns| の最小の必要要件はもっとシンプルです。つまり、複
雑なパターンを指定する必要が無ければかなりの項目を省略できます。例えば
head-/tail- の指定は省略しても構いません。この場合、一律で head-pattern と解釈
されます。
>
	let g:patternjump_patterns = {
		\ '_' : {
		\   'ci'  : [',', ')', ']', '}'],
		\   'nxo' : ['\<\h\k*\>'],
		\   },
		\ }
<
さらに、モード指定も省略できます。
>
	let g:patternjump_patterns = {
		\ '_' : ['\<\h\k*\>'],
		\ }
<
これでも有効です。

もう一つだけ説明したいことがあります。これは少し変則的なのですが、前方検索と後
方検索のそれぞれの場合で異なるパターンを指定することができるのです。
>
	let common_pattern = {
		\    'head' : [',', ')', ']', '}'],
		\    'tail' : ['\<\h\k*\>', '$'],
		\  }
	let g:patternjump_patterns = {
		\ '_' : {
		\   'nxo' : {
		\     'head' : ['\<\h\k*\>'],
		\     'tail' : ['$'],
		\     },
		\   'i' : {
		\     'common' : common_pattern
		\     },
		\   'c' : {
		\     'forward' : common_pattern
		\     'backward' : {
		\       'tail' : ['$'],
		\       },
		\     },
		\   },
		\ 'vim' : {
		\   'include' : '_',
		\   'nxo'     : {
		\     'head' : ['\<[abglstvw]:\k\+'],
		\     },
		\   },
		\ }
<
このようなパターン指定を使うと、コマンドラインモードで前方検索は常にカーソルを
行末に運びます。このような方向指定に使われるキーは三種類あります。 "common" 、
"forward" 、 "backward" であり、上の例では '_' キーの中に見られます。
"forward" と "backward" はそれぞれ前方検索、後方検索だけで使われ、 "common" は
両方のキーマッピングで使われます。上の例ではそうなっていませんが "common" と
"forward" 、 "backward" を同時に設定することもできます。この場合前方検索では
"common" と "forward" のすべてのパターンから、後方検索では "common" と
"backward" のすべてのパターンからカーソル移動先の候補を探します。

このように様々な状況におけるパターンの指定方法を見てきましたが、パターンの指定
には一つ重要なルールがあります、それは順序です。 |g:patternjump_patterns| の最
初の階層にはファイルタイプ指定がきます。次はモード指定でしょう。そしてさらに方
向指定もあるかもしれません。最後に head-/tail- の指定です。ファイルタイプの指
定をのぞいて各段階は省略することも可能です。しかしその順序が前後することはでき
ません。お忘れなきよう。


------------------------------------------------------------------------------
その他の設定項目~

パターン指定以外にもキーマッピングの挙動を制御するための変数がいくつかあります
。これらは g: のグローバルスコープで紹介されますが同じ名前の変数を別のスコープ
で指定しても構いません。バッファーローカル b: 、ウィンドウローカル w: 、タブペ
ージローカル t: 、グローバル g: の四種のスコープが利用可能であり、使い分ければ
その有効範囲を制御できるでしょう。複数のこれらの変数が同時にバッファに影響可能
な場合、 b: スコープが最優先され、次に w: 、次いで t: 、最後が g: スコープにな
ります。

g:patternjump_caching				*g:patternjump_caching*
	値に1が指定された場合、 patternjump はバッファにキャッシュを生成し、二
	回目以降の動作が高速になります。キャッシュはデフォルトでは
	"b:patternjump_cache" という名前で生成されます。名前を変更したければ、
	|g:patternjump_cach_name| の項をご覧ください。これは前方検索と後方検索
	それぞれのためのキャッシュを収めた辞書をまとめた二要素のリストです。そ
	れぞれの辞書には |g:patternjump_patterns| を解釈して生成したリストが収
	められています。
	この機能は動作をより軽快にしますが、 |g:patternjump_patterns| の変更が
	キャッシュを作り直すまで反映されなくなります。設定したパターンに十分満
	足したらキャッシュ機能を使うとよいでしょう。
	このキャッシュに関する状況はいくつかのコマンドによってうまく変更するこ
	とができます。編集中に変更したくなったらコマンドを使うのがよいでしょう
	。|:PatternjumpCachingOn| 、 |:PatternjumpCachingOff|、
	|:PatternjumpCachingToggle|。あるいはただ現在のキャッシュを削除したけ
	れば|:PatternjumpCachingDelete| を使うとよいでしょう。デフォルト値は0
	でオフになっています。
	NOTE: 前方検索を、あるいは後方検索マッピングを複数定義したい場合、キャ
	      ッシュ機能はうまく働かない恐れがあります。これはほかのオプション
	      を適切に設定することで回避できます。詳しくは
	      |g:patternjump-functions| の項の NOTE を参照してください。

g:patternjump_cach_name				*g:patternjump_cach_name*
	この変数を使用するとキャッシュを保存する変数の名前が指定できます。変数
	にはバッファローカル "b:" 、ウィンドウローカル "w:" 、タブページローカ
	ル "t:" 、グローバル "g:" スコープが使用できます。もしそれ以外のスコー
	プが使用されていたり、指定されていなかった場合は自動的にバッファローカ
	ルスコープが使用されます。これはキャッシュがファイルタイプの情報を含ま
	ないので、バッファローカルスコープの使用が推奨されるためです。デフォル
	ト値は "b:patternjump_cache" です。

g:patternjump_highlight				*g:patternjump_highlight*
	値が1の場合、すべての移動先候補を |hl-IncSearch| を使ってハイライトし
	ます。0の場合はハイライトしません。デフォルト値は0です。
	NOTE: カーソルが移動したタイミングでハイライトは消去されます。
	NOTE: この機能はできるだけ多くの移動先をすべて列挙するために{count}の
	　　　関係上スキップできる候補もすべて検索します。さらにハイライトも行
	　　　うために少しだけ動作が遅くなるかもしれません。

g:patternjump_debug_mode			*g:patternjump_debug_mode*
	値が1の場合、カーソルを動かさず、すべての移動先候補を |hl-IncSearch|
	を使ってハイライトし、候補位置、マッチしたパターン、 head- か tail- か
	をコマンドラインに表示します。これは |:message| コマンドで確認すること
	ができます。この機能は、設定したパターンが望まない動作をした場合の原因
	究明に役立つことでしょう。どのパターン記述に問題があるのかを見つけやす
	くなります。編集中にこの機能を使いたくなったらコマンドで制御するのが確
	実な手段です。
	|PatternjumpDebugModeOn|, |PatternjumpDebugModeOff|,
	|PatternjumpDebugModeToggle|.
	デフォルト値は0です。
	NOTE: カーソルが移動したタイミングでハイライトは消去されます。
	NOTE: この機能はできるだけ多くの移動先をすべて列挙するために{count}の
	　　　関係上スキップできる候補もすべて検索します。さらにハイライトも行
	　　　うために少しだけ動作が遅くなるかもしれません。

==============================================================================
KEYMAPPINGS					*patternjump-keymappings*

このプラグインは次に掲げるキーマッピングを提供します。

方向			キーマッピング			デフォルトマッピング
--------------------------------------------------------------------------
forward			<Plug>(patternjump-forward)	<M-l>
backward		<Plug>(patternjump-backward)	<M-h>
--------------------------------------------------------------------------

もしデフォルトのマッピングがお気に召されなければ、
|g:patternjump_no_default_key_mappings| という変数を vimrc で定義して下さい。
>
	let g:patternjump_no_default_key_mappings = 1
<
これでデフォルトキーマッピングは適用されません。好きなキーにマップしなおして使
ってください。

これらのキーマッピングは {count} に対応しています。指定された場合 {count} 番目
の候補へカーソルを動かします。

これらのキーマップは |nmap|, |xmap|, |omap|, |imap|, |cmap| によって使用可能で
す。


------------------------------------------------------------------------------
キーマッピング~
<Plug>(patternjump-forward)				*patternjump-forward*
	このキーマッピングはパターンにマッチする候補を前方検索し、最も近いもの
	へカーソルを動かします。キーマッピングを変更するなら次のように使います
	。(下に掲載するのはデフォルトのキーマッピングで、これに不満がない場合
	vimrc に書く必要はありません。使用法の例として載せています。)
>
	nmap <M-l> <Plug>(patternjump-forward)
<

<Plug>(patternjump-backward)				*patternjump-backward*
	このキーマッピングはパターンにマッチする候補を後方検索し、最も近いもの
	へカーソルを動かします。キーマッピングを変更するなら次のように使います
	。(下に掲載するのはデフォルトのキーマッピングで、これに不満がない場合
	vimrc に書く必要はありません。使用法の例として載せています。)
>
	nmap <M-h> <Plug>(patternjump-backward)
<

==============================================================================
COMMANDS					*patternjump-commands*

:PatternjumpCachingOn				*:PatternjumpCachingOn*
	このコマンドを使用すると patternjump はキャッシュ機能を有効化し、その
	動作を高速化します。 |g:patternjump_caching| の項もご確認ください。
	NOTE: コマンドを使用してもすぐにはキャッシュは生成されません。次回のキ
	      ーイベント発生時に生成されます。

:PatternjumpCachingOff				*:PatternjumpCachingOff*
	このコマンドを使用するとキャッシュ機能の使用を中止します。

:PatternjumpCachingToggle			*:PatternjumpCachingToggle*
	キャッシュ機能のオン・オフを切り替えます。

PatternjumpDeleteCache				*:PatternjumpDeleteCache*
	このコマンドを使用すると |g:patternjump_cach_name| に指定されているキ
	ャッシュを破棄します。キャッシュ機能の停止はなされないので、次回のキー
	イベント発生時に新しいキャッシュが生成されるでしょう。

:PatternjumpDebugModeOn				*:PatternjumpDebugModeOn*
	このコマンドを使用すると、デバッグモードに入ります。詳しくは
	|g:patternjump_debug_mode| の項をご覧ください。

:PatternjumpDebugModeOff			*:PatternjumpDebugModeOff*
	このコマンドを使用すると、デバッグモードを終了します。詳しくは
	|g:patternjump_debug_mode| の項をご覧ください。

:PatternjumpDebugModeToggle			*:PatternjumpDebugModeToggle*
	このコマンドを使用すると、デバッグモードのオン・オフを切り替えます。
	詳しくは|g:patternjump_debug_mode| の項をご覧ください。

==============================================================================
FUNCTIONS					*patternjump-functions*

patternjump のキーマッピングはそれぞれの機能に対応する関数を持ち、それらは次の
ような共通のインターフェイスを持ちます。

patternjump#xxx(mode[, patternjump_patterns[, count[, options_dictionary]]])

xxx と書いてある部分は forward もしくは backward です。

第一引数の "mode" の指定は必須です。これはどのモードにマッピングされているかを
関数に伝えるために使われます。関数は |nmap|, |xmap|, |omap|, |imap|, |cmap| に
マップすることができるので、 "mode" には 'n', 'x', 'o', 'i', 'c' のどれかが指
定されることになります。

二つ目の引数 "patternjump_patterns" には |g:patternjump_patterns| と同じ構造の
辞書が指定されます。この引数が指定された場合、関数は |g:patternjump_patterns|
を無視し、引数に指定されたパターンを使用します。あるいはより簡単に次のようなパ
ターンのリストを渡すこともできます。
>
	[['head-patterns'], ['tail-patterns']]
<
もしあなたの望むパターンが十分にシンプルならこの記法で十分でしょう。またこの記
法だとキャッシュ使用時と同等の速度で動作します。

三つめの引数 "count" には数字が使えます。もし正の数が指定された場合、関数は常
に {count} 指定を無視し、引数に与えられた数字を使います。もしゼロおよび負数が
指定された場合は通常と同じように {count} を参照します。

四つ目の引数 "options_dict" にはオプションの使用を強制するための辞書が与えられ
ます。キーの名前は |patternjump-configuration| にある挙動制御用の変数名から
"g:patternjump_" を取り除いたものが使用されます。つまり、 "caching" と
"highlight" と"debug_mode" が使用できます。
>
	nmap <silent> <M-f> :<C-u>call patternjump#forward(
		\				'n',
		\				g:patternjump_patterns,
		\				0,
		\				{'highlight' : 1})
<
このように書くと常にハイライトを行います。

挿入モードで使用する場合は |imap| を次のように使います。
>
	imap <silent> <M-l> <C-r>=patternjump#forward(
		\				'i',
		\				g:patternjump_patterns,
		\				0,
		\				{'highlight' : 1})<CR>
<
コマンドラインモードに |cmap| する場合は <silent> を指定しないよう注意してくだ
さい。コマンドラインが正しく更新されず、カーソルが動いてないように見えてしまい
ます。
>
	cmap <M-l> <C-r>=patternjump#forward(
		\				'c',
		\				g:patternjump_patterns,
		\				0,
		\				{'highlight' : 1})<CR>
<
|patternjump-configuration| の項も合わせてご覧ください。

加えて、特別なキー "raw" も使用できます。値に1が指定されている場合、関数はカー
ソルを動かさず、かわりに三つの情報を収めた辞書を返します。一つ目は"column" キ
ーに与えられた情報で、移動先の桁数が入っています。二つ目は"candidates" キーに
与えられた情報で、パターンにマッチした位置のリストです。三つめは "patterns" キ
ーに与えられた情報で、マッチしたパターンと head/tail の所属情報のリストです。
"candidates" と"patterns" の値は互いに対応しています。
>
	let output = patternjump#forward(
		\			'n',
		\			g:patternjump_patterns,
		\			1,
		\			{'raw' : 1})

	" 移動先の桁番号         :   例 10
	echo output.column

	" 移動先桁番号のリスト   :   例 [10, 20]
	echo output.candidates

	" マッチしたパターン     :   例 [['\<\h\k*\>', 'head'], ['$', 'tail']]
	echo output.patterns
<

NOTE: デフォルト以外のキーマッピングを定義してキャッシュ機能を使いたい場合、
      |g:patternjump_cach_name| を使ってキャッシュの名前を適切に管理するように
      してください。もし何も設定しなければ、デフォルトのキーマッピングと追加し
      たキーマッピングは同じ変数 "b:patternjump_cache" を使おうとするのでどち
      らか一方は望む動作をしないでしょう。これを避けるために別のキャッシュ名を
      片方に指定してください。

      例えば、デフォルトのほかに最寄りの括弧を探すキーマッピングを探すキーマッ
      ピングを定義したいとします。その場合、後者をこのように定義します。
>
	nmap <silent> <M-p> :<C-u>call patternjump#forward(
		\		'n',
		\		{'_' : ['(', '[', '{', ')', ']', '}']},
		\		0,
		\		{
		\		'cashing'    : 1,
		\		'cache_name' : 'b:patternjump_cache_alt'
		\		}
		\	)
<
      あるいは、この場合パターンはとても単純であるため、次の記述でも十分でしょ
      う。
>
	nmap <silent> <M-p> :<C-u>call patternjump#forward(
		\		'n',
		\		[['(', '[', '{', ')', ']', '}'], []]
		\		0
		\	)
<
      このキーマッピングはキャッシュを使用しませんが、キャッシュを使用した場合
      と同等の速度で動作します。パターンがシンプルな場合はこちらを選ぶとよいで
      しょう。


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:
