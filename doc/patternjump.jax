*patternjump.jax*	カーソル移動をお望みのままに！
						Last change:03-Oct-2015.

書いた人   : machakann <mckn@outlook.jp>
ライセンス : NYSL license
          Japanese <http://www.kmonos.net/nysl/>
          English (Unofficial) <http://www.kmonos.net/nysl/index.en.html>

必須要件:	Vim 7.3.816 or higher
		|+reltime| feature (optional)
		|+float| feature (optional)

==============================================================================
CONTENTS					*patternjump-contents*

INTRODUCTION		|patternjump-introduction|
CONFIGURATION		|patternjump-configuration|
KEYMAPPINGS		|patternjump-keymappings|
COMMANDS		|patternjump-commands|
FUNCTIONS		|patternjump-functions|

==============================================================================
INTRODUCTION					*patternjump-introduction*

*patternjump* は様々なモードにおいて効果的にカーソルを移動する手段を提供します
。カーソルを動かすためのルールは正規表現によって定義され、簡単に拡張することが
できます。このヘルプではカーソルを動かすためのルールをパターンと呼びますのでご
留意ください。パターンは複数登録することができ、すべての候補のうちからマッチし
た最も近い場所へカーソルを運ぶように作られています。このプラグインは二種のキー
マッピングを提供しそれぞれがパターンの、前方検索、後方検索の機能を担当します。

patternjump をご使用になるうえでは、まずパターンを用意しなければなりません。で
すが、ご安心ください。もしいかなるパターンの指定もない場合は、デフォルトで指定
された基本的なパターンを自動的に使用します。なので、まずは使ってみてどのように
動くのかを知っていただくのがよいでしょう。あなた好みの設定を追加するのはそのあ
とからでも遅くありません。新しい設定を追加するうえで役に立つと思われる機能も用
意しておりますので、 |patternjump-configuration| 及び |patternjump-commands|
の項をご参照ください。それでは patternjump の簡単な説明に移ります。

たとえば次のようなコードの最初の文字の上にカーソルがあるとしましょう。
>
	let foo = "bar"
<
もし "bar" というパターンが定義されている場合、当然これはコード内の "bar" にマ
ッチします。なので、前方検索のキーマッピングを使用した場合、カーソルは "bar"
の上へ移動します。パターンには二種類ありまして、それぞれ head-pattern 、
tail-pattern と呼びます。すべてのパターンはこのどちらかに属さなければなりませ
んので、設定追加の際にどちらか選んでいただくことになります。 もし、 "bar" が
head-pattern に属していた場合、カーソルはマッチ範囲の頭 (head) の 'b' へ動くで
しょう。また、"bar" が tail-pattern に属していた場合、カーソルはマッチ範囲の末
尾 (tail) 、すなわち 'r' の上へ動くでしょう。
>
	---------->#    head-pattern
	let foo = "bar"                               '#' はカーソル位置を表す
	------------>#  tail-pattern
<
さて、お気づきになりましたか？どうにも "bar" というパターンはあまり役に立ちそ
うにありませんね。なのでこれはデフォルトのパターンに収録しないことにしました。
賢い選択ですね。かわりに '\<\h\k\+\>' というパターンがデフォルトパターンに含ま
れています。これは 'iskeyword' オプションによって判定される、独立した単語にマ
ッチします。なので上のコードの場合は "let"、 "foo" 、 "bar" の上で止まるでしょ
う。そしてまさにそれは、多くの場合、レビューの際に修正したい箇所ではないでしょ
うか。
>
	#   #      #    head-pattern
	let foo = "bar"                               '#' はカーソル位置を表す
	  #   #      #  tail-pattern
<
さらに、これらのパターンは |vim-modes| に従って切り替えることができます。たと
えば、先ほど紹介した '\<\h\k\+\>' というパターンはノーマルモードでは
head-pattern に属している一方で、挿入モードでは tail-pattern に属しています。
ノーマルモードでは |text-objects| や {motion} によって素晴らしい編集環境が得ら
れます。この場合、単語を修正したければ |c||iw| あるいは、単に、 |c||w| で事足
りますね。挿入モードではこれらは使用できないのですが、それでも簡単な編集機能は
備わっています。この場合、単語を削除するのに |i_CTRL-w| が便利です。これらの違
いが、一見、統一性のないように見えるデフォルトパターンの訳なのです。興味を持っ
ていただけましたか？よろしければ |patternjump-configuration| もご覧ください。

==============================================================================
CONFIGURATION					*patternjump-configuration*

あなた好みのパターンは |g:patternjump_patterns| という変数を介してキーマッピン
グに伝えられます。では最初にデフォルトパターンと等価になる設定を紹介します。
>
	let g:patternjump_patterns = {
		\ '_' : {
		\   'i' : {
		\     'head' : ['^\s*\zs\S', ',', ')', ']', '}'],
		\     'tail' : ['\<\h\k*\>', '.$'],
		\     },
		\   'n' : {
		\     'head' : ['^\s*\zs\S', '\<\h\k*\>', '.$'],
		\     },
		\   'x' : {
		\     'tail' : ['^\s*\zs\S', '\<\h\k*\>', '.$'],
		\     },
		\   'o' : {
		\     'forward'  : {'tail_inclusive' : ['\<\h\k*\>']},
		\     'backward' : {'head_inclusive' : ['\<\h\k*\>']},
		\     },
		\   },
		\ '*' : {
		\   'c' : {
		\     'head' : ['^', ' ', '/', '[A-Z]', ',',
		\               ')', ']', '}', '$'],
		\     },
		\   },
		\ }
<

						*g:patternjump_patterns*
ご覧のとおり、 |g:patternjump_patterns| は辞書であり、最初の階層にファイルタイ
プ名に相当するキーを持っています。このキー名はそれぞれのファイルタイプの
&filetype の値に等しい、すなわち |ftdetect| によって設定されるファイルタイプ名
でなければいけません。デフォルトパターンは、ファイルタイプ名のキーをこの階層に
持っていないようですが、代わりに '_' と '*' というキーを持っていますね。これら
はファイルタイプ名の代わりとして働く特殊なキー名として扱われています。特別なキ
ー名 '_' は汎用的な設定で、特にファイルタイプに特別なパターン指定のない場合に
使われます。もう一つの特別なキー名 '*' は後ほど説明されますので、ここはひとま
ず先に進めます。もし特定のファイルタイプに特有のパターンを定義したい場合も、簡
単にできます。たとえば Vim script 編集時にスコープ付きの変数名に反応するパター
ンを追加したいとしましょう。その場合はこのように書きます。
>
	let g:patternjump_patterns = {
		\ '_' : {
		\   'i' : {
		\     'head' : ['^\s*\zs\S', ',', ')', ']', '}'],
		\     'tail' : ['\<\h\k*\>', '.$'],
		\     },
		\   'n' : {
		\     'head' : ['^\s*\zs\S', '\<\h\k*\>', '.$'],
		\     },
		\   'x' : {
		\     'tail' : ['^\s*\zs\S', '\<\h\k*\>', '.$'],
		\     },
		\   'o' : {
		\     'forward'  : {'tail_inclusive' : ['\<\h\k*\>']},
		\     'backward' : {'head_inclusive' : ['\<\h\k*\>']},
		\     },
		\   },
		\
		\ '*' : {
		\   'c' : {
		\     'head' : ['^', ' ', '/', '[A-Z]', ',',
		\               ')', ']', '}', '$'],
		\     },
		\   },
		\
		\ 'vim' : {
		\   'include' : '_'
		\   'n' : {
		\     'head' : ['\<[abglstvw]:\k\+'],
		\     },
		\   },
		\ }
<
あるいは、 |g:patternjump_patterns| をすでに定義済みなら簡単に次のように書けま
す。
>
	let g:patternjump_patterns.vim = {
		\   'n' : {
		\     'include' : '_'
		\     'head' : ['\<[abglstvw]:\k\+'],
		\     },
		\   },
		\ }
<
ただし、実はこのパターンはデフォルトに含まれるパターン '\<\h\k*\>' によって代
替できるので特に追加する必要はないでしょう。説明のために使います。

それぞれのファイルタイプ指定のキーもまた値として辞書を持っています。この辞書は
"i" や "n" 、 "x" 、 "o" 、 "c" といったキーを持っていますね。これらは内包する
パターンがどのモードにおいて有効かを指定しています。

	'n' : ノーマルモード
	'x' : ビジュアルモード
	'o' : オペレータ待機モード
	'c' : コマンドラインモード
	'i' : 挿入モード

もし異なるモードで同じパターンを共有したい場合は、 "ci" や "nxo" のようにまと
めて書くこともできます。この時、順番を気にする必要はありません。つまり、 "ci"
と "ic" はどちらも有効です。

デフォルトパターンに見られるように、オペレータ待機モードは "head_inclusive" や
"tail_inclusive" といった特有のキー名を持っています。通常の "head" や "tail"で
指定した場合、 patternjump の提供するキーマッピングは |exclusive| なカーソル移
動となります。 |inclusive| なカーソル移動を使いたい場合は "head_inclusive" や
"tail_inclusive" を使ってください。これらはオペレータ待機モードでのみ有効です
。もし、 |exclusive| 及び |inclusive| なパターンの両方に同じ位置がマッチした場
合は |inclusive| なカーソル移動となります。

vimscript のパターン指定を見てみるとモード指定のキーのほかに特別なキー
"include" があるのが見られますね。これは vimscript 編集時に汎用のパターン '_'
キーに登録されているパターンを含むことを意味します。 "include" キーの値にはフ
ァイルタイプ名および '_' の文字列か、それらを複数含むリストを指定することがで
きます。
>
	let g:patternjump_patterns = {
		\ '_' : {
		\   'i' : {
		\     'head' : ['^\s*\zs\S', ',', ')', ']', '}'],
		\     'tail' : ['\<\h\k*\>', '.$'],
		\     },
		\   'n' : {
		\     'head' : ['^\s*\zs\S', '\<\h\k*\>', '.$'],
		\     },
		\   'x' : {
		\     'tail' : ['^\s*\zs\S', '\<\h\k*\>', '.$'],
		\     },
		\   'o' : {
		\     'forward'  : {'tail_inclusive' : ['\<\h\k*\>']},
		\     'backward' : {'head_inclusive' : ['\<\h\k*\>']},
		\     },
		\   },
		\ '*' : {
		\   'c' : {
		\     'head' : ['^', ' ', '/', '[A-Z]', ',',
		\               ')', ']', '}', '$'],
		\     },
		\   },
		\ 'SomeOtherFiletype' : {
		\   'nxo' : {
		\     'head' : ['foo'],
		\     'tail' : ['bar'],
		\     },
		\   },
		\ 'vim' : {
		\   'include' : ['_', 'SomeOtherFiletype'],
		\   'n'     : {
		\     'head' : ['\<[abglstvw]:\k\+'],
		\     },
		\   },
		\ }
<

もう一つ特別なキー '*' がありますね。もしこのキーが存在すると、そのパターンは
常に "include" されます。例えばコマンドラインモードの設定などはファイルタイプ
に依らないことが多いかと思います。なのでコマンドラインモードの設定を、すべての
ファイルタイプで共有する手段として良いかもしれません。ただしその特性上、影響範
囲が大きいので使用には十分注意してください。

この "include" はファイルタイプ設定単位でしか指定することができません。これよ
りも細かい単位でのパターンの共有の仕組みは用意されていません。なので、少し工夫
して次のように書くとよいでしょう。
>
	let common_pattern = ['\<\h\k*\>']
	let g:patternjump_patterns = {
		\ '_' : {
		\   'i' : {
		\     'head' : ['^\s*\zs\S', ',', ')', ']', '}'],
		\     'tail' : ['.$'] + common_pattern
		\     },
		\   'n' : {
		\     'head' : ['^\s*\zs\S', '.$'] + common_pattern,
		\     },
		\   'x' : {
		\     'tail' : ['^\s*\zs\S', '.$'] + common_pattern,
		\     },
		\   'o' : {
		\     'forward'  : {'tail_inclusive' : common_pattern},
		\     'backward' : {'head_inclusive' : common_pattern},
		\     },
		\   },
		\ '*' : {
		\   'c' : {
		\     'head' : ['^', ' ', '/', '[A-Z]', ',',
		\               ')', ']', '}', '$'],
		\     },
		\   },
		\ }
<
こう書けば "common_pattern" にパターンを追加したときコマンドラインモード、挿入
モードの tail-pattern および ノーマルモードの head-pattern 、ビジュアルモード
の tail-pattern でパターンが共有されます。
NOTE: "include" はネストしません！

さらに、前方検索と後方検索のそれぞれの場合で異なるパターンを指定することができ
ます。デフォルトパターンではオペレータ待機モードの設定がそうなっています。さら
に次の例も見てください。
>
	let g:patternjump_patterns = {
		\ '_' : {
		\   'i' : {
		\     'head' : ['^\s*\zs\S', ',', ')', ']', '}'],
		\     'tail' : ['\<\h\k*\>', '.$'],
		\     },
		\   'n' : {
		\     'head' : ['^\s*\zs\S', '\<\h\k*\>', '.$'],
		\     },
		\   'x' : {
		\     'tail' : ['^\s*\zs\S', '\<\h\k*\>', '.$'],
		\     },
		\   'o' : {
		\     'forward'  : {'tail_inclusive' : ['\<\h\k*\>']},
		\     'backward' : {'head_inclusive' : ['\<\h\k*\>']},
		\     },
		\   },
		\ '*' : {
		\   'c' : {
		\     'common' : {
		\       'head' : ['$'],
		\       },
		\     'forward' : {
		\       'head' : ['^', ' ', '/', '[A-Z]', ',', ')', ']', '}'],
		\       },
		\     },
		\   },
		\ }
<
このようなパターン指定を使うと、コマンドラインモードで前方検索は常にカーソルを
行末に運びます。このような方向指定に使われるキーは三種類あります。 "common" 、
"forward" 、 "backward" であり、上の例では '_' と '*' キーの中に見られます。
"forward" と "backward" はそれぞれ前方検索、後方検索だけで使われ、 "common" は
両方のキーマッピングで使われます。 "common" と"forward" 、 "backward" を同時に
設定した場合前方検索では"common" と "forward" のすべてのパターンから、後方検索
では "common" と "backward" のすべてのパターンからカーソル移動先の候補を探しま
す。

実は |g:patternjump_patterns| の最小の必要要件はもっとシンプルです。つまり、複
雑なパターンを指定する必要が無ければかなりの項目を省略できます。例えば
head-/tail- の指定は省略しても構いません。この場合、一律で head-pattern と解釈
されます。
>
	let g:patternjump_patterns = {
		\ '_' : {
		\   'ci'  : [',', ')', ']', '}', '$'],
		\   'nxo' : ['\<\h\k\+\>'],
		\   },
		\ }
<
さらに、モード指定も省略できます。
>
	let g:patternjump_patterns = {
		\ '_' : ['\<\h\k\+\>'],
		\ }
<
これでも有効です。

このように様々な状況におけるパターンの指定方法を見てきましたが、パターンの指定
には一つ重要なルールがあります、それは順序です。 |g:patternjump_patterns| の最
初の階層にはファイルタイプ指定がきます。次はモード指定でしょう。そしてさらに方
向指定もあるかもしれません。最後に head-/tail- の指定です。ファイルタイプの指
定をのぞいて各段階は省略することも可能です。しかしその順序が前後することはでき
ません。お忘れなきよう。


------------------------------------------------------------------------------
キー名のまとめ~

ファイルタイプの指定~
	'_' と '*' とファイルタイプ名が使用できます。
	'_' キーは現在のファイルタイプに特別なパターン指定のない場合に使われま
	す。
	'*' キーは存在すれば、常に include されます。

モードの指定~
	'n', 'x', 'o', 'i', 'c' とそれらの組み合わせが使用できます。

	'n' : ノーマルモード
	'x' : ビジュアルモード
	'o' : オペレータ待機モード
	'c' : コマンドラインモード
	'i' : 挿入モード

方向の指定~
	"common", "forward" と "backward" が使用できます。

head-/tail- の指定~
	"head", "tail" と "head_inclusive", "tail_inclusive" が使用できます。
	後者の二つはオペレータ待機モードでのみ有効です。
	"head" と "tail" パターンは |exclusive| なカーソル移動になります。
	"head_inclusive" と "tail_inclusive" パターンは |inclusive| なカーソル
	移動になります。


------------------------------------------------------------------------------
その他の設定項目~

パターン指定以外にもキーマッピングの挙動を制御するための変数がいくつかあります
。これらは g: のグローバルスコープで紹介されますが同じ名前の変数を別のスコープ
で指定しても構いません。バッファーローカル b: 、ウィンドウローカル w: 、タブペ
ージローカル t: 、グローバル g: の四種のスコープが利用可能であり、使い分ければ
その有効範囲を制御できるでしょう。複数のこれらの変数が同時にバッファに影響可能
な場合、 b: スコープが最優先され、次に w: 、次いで t: 、最後が g: スコープにな
ります。

g:patternjump_ignorecase			*g:patternjump_ignorecase*
	値が1の場合大文字小文字を無視します。値が0の場合大文字小文字を区別しま
	す。デフォルト値は0です。

g:patternjump_caching				*g:patternjump_caching*
	値に1が指定された場合、 patternjump はバッファにキャッシュを生成し、二
	回目以降の動作が高速になります。この機能は動作をより軽快にしますが、
	|g:patternjump_patterns| の変更がキャッシュを作り直すまで反映されなく
	なります。設定したパターンに十分満足したらキャッシュ機能を使うとよいで
	しょう。デフォルト値は0でオフになっています。
	このキャッシュに関する状況はいくつかのコマンドによってうまく変更するこ
	とができます。編集中に変更したくなったらコマンドを使うのがよいでしょう
	。|:PatternjumpCachingOn| 、 |:PatternjumpCachingOff|、
	|:PatternjumpCachingToggle| が使用できます。あるいはただ現在のキャッシ
	ュを削除したければ|:PatternjumpDeleteCache| を使うとよいでしょう。

g:patternjump_timeout				*g:patternjump_timeout*
	移動先の検索に時間がかかった場合に、指定された数値のミリ秒単位で検索を
	切り上げます。Vimがハングアップするのを防ぐために適切な正の数値を指定
	してください。もしゼロ以下の数値が指定されていると、たとえ時間がかかっ
	たとしても検索を切り上げません。デフォルト値は 1000 です。
	NOTE: このオプションは |+reltime|, |+float| 機能が有効なVimを必要とし
	　　　ます。

g:patternjump_highlight				*g:patternjump_highlight*
	値が1の場合、すべての移動先候補を |hl-IncSearch| を使ってハイライトし
	ます。0の場合はハイライトしません。デフォルト値は0です。
	NOTE: カーソルが移動したタイミングでハイライトは消去されます。
	NOTE: この機能はノーマル、挿入、ビジュアルモードでのみ有効です。
	NOTE: ハイライトのために少しだけ動作が遅くなるかもしれません。

g:patternjump_debug_mode			*g:patternjump_debug_mode*
	値が1の場合、カーソルを動かさず、すべての移動先候補を |hl-IncSearch|
	を使ってハイライトし、候補位置、マッチしたパターン、 head- か tail- か
	をコマンドラインに表示します。これは |:message| コマンドで確認すること
	ができます。この機能は、設定したパターンが望まない動作をした場合の原因
	究明に役立つことでしょう。どのパターン記述に問題があるのかを見つけやす
	くなります。編集中にこの機能を使いたくなったらコマンドで制御するのが確
	実な手段です。
	|PatternjumpDebugModeOn|, |PatternjumpDebugModeOff|,
	|PatternjumpDebugModeToggle|.
	デフォルト値は0です。
	NOTE: カーソルが移動したタイミングでハイライトは消去されます。
	NOTE: ハイライトのために少しだけ動作が遅くなるかもしれません。


==============================================================================
KEYMAPPINGS					*patternjump-keymappings*

このプラグインは次に掲げるキーマッピングを提供します。

方向			キーマッピング			デフォルトマッピング
--------------------------------------------------------------------------
forward			<Plug>(patternjump-forward)	<M-l>
backward		<Plug>(patternjump-backward)	<M-h>
--------------------------------------------------------------------------

もしデフォルトのマッピングがお気に召されなければ、
|g:patternjump_no_default_key_mappings| という変数を vimrc で定義して下さい。
>
	let g:patternjump_no_default_key_mappings = 1
<
これでデフォルトキーマッピングは適用されません。好きなキーにマップしなおして使
ってください。

これらのキーマッピングは {count} に対応しています。指定された場合 {count} 番目
の候補へカーソルを動かします。

これらのキーマップは |nmap|, |xmap|, |omap|, |imap|, |cmap| によって使用可能で
す。


------------------------------------------------------------------------------
キーマッピング~
<Plug>(patternjump-forward)				*patternjump-forward*
	このキーマッピングはパターンにマッチする候補を前方検索し、最も近いもの
	へカーソルを動かします。キーマッピングを変更するなら次のように使います
	。(下に掲載するのはデフォルトのキーマッピングで、これに不満がない場合
	vimrc に書く必要はありません。使用法の例として載せています。)
>
	nmap <M-l> <Plug>(patternjump-forward)
<

<Plug>(patternjump-backward)				*patternjump-backward*
	このキーマッピングはパターンにマッチする候補を後方検索し、最も近いもの
	へカーソルを動かします。キーマッピングを変更するなら次のように使います
	。(下に掲載するのはデフォルトのキーマッピングで、これに不満がない場合
	vimrc に書く必要はありません。使用法の例として載せています。)
>
	nmap <M-h> <Plug>(patternjump-backward)
<

==============================================================================
COMMANDS					*patternjump-commands*

:PatternjumpCachingOn				*:PatternjumpCachingOn*
	このコマンドを使用すると patternjump はキャッシュ機能を有効化し、その
	動作を高速化します。 |g:patternjump_caching| の項もご確認ください。
	NOTE: コマンドを使用してもすぐにはキャッシュは生成されません。次回のキ
	      ーイベント発生時に生成されます。

:PatternjumpCachingOff				*:PatternjumpCachingOff*
	このコマンドを使用するとキャッシュ機能の使用を中止します。

:PatternjumpCachingToggle			*:PatternjumpCachingToggle*
	キャッシュ機能のオン・オフを切り替えます。

:PatternjumpDeleteCache				*:PatternjumpDeleteCache*
	このコマンドを使用すると現在のバッファのキャッシュを破棄します。キャッ
	シュ機能の停止はなされないので、キャッシュ機能をオフにしない限り次回の
	キーイベント発生時に新しいキャッシュが生成されるでしょう。

:PatternjumpDebugModeOn				*:PatternjumpDebugModeOn*
	このコマンドを使用すると、デバッグモードに入ります。詳しくは
	|g:patternjump_debug_mode| の項をご覧ください。

:PatternjumpDebugModeOff			*:PatternjumpDebugModeOff*
	このコマンドを使用すると、デバッグモードを終了します。詳しくは
	|g:patternjump_debug_mode| の項をご覧ください。

:PatternjumpDebugModeToggle			*:PatternjumpDebugModeToggle*
	このコマンドを使用すると、デバッグモードのオン・オフを切り替えます。
	詳しくは|g:patternjump_debug_mode| の項をご覧ください。

==============================================================================
FUNCTIONS					*patternjump-functions*

patternjump のキーマッピングはそれぞれの機能に対応する関数を持ち、それらは次の
ような共通のインターフェイスを持ちます。

patternjump#xxx(mode[, patternjump_patterns[, count[, options_dictionary]]])

xxx と書いてある部分は forward もしくは backward です。

第一引数の "mode" の指定は必須です。これはどのモードにマッピングされているかを
関数に伝えるために使われます。関数は |nmap|, |xmap|, |omap|, |imap|, |cmap| に
マップすることができるので、 "mode" には 'n', 'x', 'o', 'i', 'c' のどれかが指
定されることになります。

二つ目の引数 "patternjump_patterns" には |g:patternjump_patterns| と同じ構造の
辞書が指定されます。この引数が指定された場合、関数は |g:patternjump_patterns|
を無視し、引数に指定されたパターンを使用します。あるいはより簡単に次のようなパ
ターンのリストを渡すこともできます。
>
	[
		[['head-patterns'], ['tail-patterns']],
		[['head-inc-patterns'], ['tail-inc-patterns']]
	]
<
もしあなたの望むパターンが十分にシンプルならこの記法で十分でしょう。またこの記
法だとキャッシュ使用時と同等の速度で動作します。オペレータ待機モードでは
'head-patterns' と 'tail-patterns' は |exclusive| なカーソル移動に、
'head-inc-pattern' と 'tail-inc-pattern' は |inclusive| なカーソル移動に使われ
ます。それ以外のモードでは単に 'head-patterns' と 'tail-patterns' のみが使われ
ます。

三つめの引数 "count" には数字が使えます。もし正の数が指定された場合、関数は常
に {count} 指定を無視し、引数に与えられた数字を使います。もしゼロおよび負数が
指定された場合は通常と同じように {count} を参照します。

四つ目の引数 "options_dict" にはオプションの使用を強制するための辞書が与えられ
ます。キーの名前は |patternjump-configuration| にある挙動制御用の変数名から
"g:patternjump_" を取り除いたものが使用されます。つまり、 "ignorecase" 、
"caching" 、 "timeout" 、 "highlight" 、 "debug_mode" 、が使用できます。
>
	nnoremap <silent> <M-f> :<C-u>call patternjump#forward(
		\				'n',
		\				g:patternjump_patterns,
		\				0,
		\				{'highlight' : 1})<CR>
<
このように書くと常にハイライトを行います。

挿入モードで使用する場合は |imap| を次のように使います。
>
	inoremap <silent> <M-l> <C-r>=patternjump#forward(
		\				'i',
		\				g:patternjump_patterns,
		\				0,
		\				{'highlight' : 1})<CR>
<
コマンドラインモードに |cmap| する場合は <silent> を指定しないよう注意してくだ
さい。コマンドラインが正しく更新されず、カーソルが動いてないように見えてしまい
ます。
>
	cnoremap <M-l> <C-r>=patternjump#forward(
		\				'c',
		\				g:patternjump_patterns,
		\				0)<CR>
<
|patternjump-configuration| の項も合わせてご覧ください。

加えて、特別なキー "raw" も使用できます。値が1の時、関数はカーソルを動かしませ
ん。2の時は動かします。さらに値に1か2が指定されている場合、関数は二つの情報を
収めた辞書を返します。一つ目は"destination" キーに与えられた情報で、移動先の行
と桁の番号が収められたリスト、マッチしたパターン、"head" か "tail" かの情報を
含んだリストです。二つ目は"candidates" キーに与えられた情報で、挙げられたすべ
ての候補に関して"destination" キーと同種の情報を収めたリストのリストになりま
す。
>
	let output = patternjump#forward(
		\			'n',
		\			g:patternjump_patterns,
		\			1,
		\			{'raw' : 1})

	" 移動先の桁番号
	" 例 [[1, 5], '\<\h\k*\>', 'head']
	echo output.column

	" 移動先候補の情報
	" 例 [[[1, 5], '\<\h\k*\>', 'head'], [[1, 10], '$', 'tail']]
	echo output.candidates
<


==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:
